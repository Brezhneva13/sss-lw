1.Данные о пользователе БД (права доступа: скрин с phpMyAdmin и код подключения к БД из приложения)

<?php
// Параметры подключения
$host = 'localhost'; // адрес сервера
$user = 'admin'; // имя пользователя
$password = '0000'; // пароль
$database = 'sistem'; // имя базы данных

// Создание подключения
$mysqli = new mysqli($host, $user, $password, $database);

// Проверка соединения
if ($mysqli->connect_error) {
    die("Ошибка подключения: " . $mysqli->connect_error);
}


echo "Успешно подключено к базе данных!";

// Закрытие соединения
$mysqli->close();
?>


2.Запрос и обработка запроса на авторизацию в админ панели
 <?php
// Настройки подключения к базе данных
$servername = "localhost"; // Имя сервера
$username_db = "admin"; // Имя пользователя базы данных
$password_db = "0000"; // Пароль пользователя базы данных
$dbname = "sistem"; // Имя базы данных

// Создание подключения
$conn = new mysqli($servername, $username_db, $password_db, $dbname);

// Проверка подключения
if ($conn->connect_error) {
    die("Ошибка подключения: " . $conn->connect_error);
}

// Инициализация переменной для сообщения об ошибке
$error_message = '';

// Проверка, была ли отправлена форма входа
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['login'])) {
    // Получаем данные из формы
    $username = mysqli_real_escape_string($conn, $_POST['username'] ?? '');
    $password = $_POST['password'] ?? '';

    // Получаем данные пользователя из базы данных
    $sql = "SELECT * FROM users WHERE username = '$username'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();

        // Проверка пароля
        if (password_verify($password, $user['password'])) {
            // Если данные верны, сохраняем информацию о пользователе в сессии
            session_start(); // Переносим сюда, чтобы работать только при успешном входе
            $_SESSION['username'] = $username;
            // Перенаправляем на защищённую страницу
            header('Location: dashboard.php');
            exit();
        } else {
            $error_message = 'Неверный логин или пароль.';
        }
    } else {
        $error_message = 'Неверный логин или пароль.';
    }
}

// Закрытие подключения
$conn->close();
?>


3.Структура таблицы, пользователей админки


Типовой SQL запрос  на выборку данных из одной таблицы в админке (показать в том числе обработку входящих значений, например таблица, кол-во записей и т.п.)
4. <?php
// Подключение к базе данных
$host = 'localhost';
$user = 'admin';
$password = '0000';
$database = 'sistem';

$mysqli = new mysqli($host, $user, $password, $database);

// Проверка соединения
if ($mysqli->connect_error) {
    die("Ошибка подключения: " . $mysqli->connect_error);
}

// Параметры для постраничной навигации
$limit = 10; // Количество записей на странице
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1; // Текущая страница
$offset = ($page - 1) * $limit; // Смещение для SQL-запроса

// Получение общего количества клиентов
$result = $mysqli->query("SELECT COUNT(*) as total FROM Client");
$totalClients = $result->fetch_assoc()['total'];
$totalPages = ceil($totalClients / $limit); // Общее количество страниц

// Получение списка клиентов с учетом постраничной навигации
$query = "SELECT * FROM Client LIMIT ? OFFSET ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("ii", $limit, $offset);
$stmt->execute();
$clients = $stmt->get_result();

// Отображение данных
echo "<h2>Список клиентов</h2>";
echo "<table class='table table-striped'>";
echo "<thead>
        <tr>
            <th>Номер клиента</th>
            <th>Телефон</th>
            <th>Адрес</th>
            <th>Номер карты</th>
            <th>Имя</th>
            <th>Фамилия</th>
            <th>Отчество</th>
            <th>Номер банка</th>
            <th>Действия</th>
        </tr>
      </thead>
      <tbody>";

while ($client = $clients->fetch_assoc()) {
    echo "<tr>
            <td>{$client['ClientNumber']}</td>
            <td>{$client['Phone']}</td>
            <td>{$client['Address']}</td>
            <td>{$client['CardNumber']}</td>
            <td>{$client['Name']}</td>
            <td>{$client['Surname']}</td>
            <td>{$client['Patronymic']}</td>
            <td>{$client['BankNumber']}</td>
            <td>
                <a href='?edit={$client['ClientNumber']}' class='btn btn-warning btn-sm'>Редактировать</a>
                <a href='?delete={$client['ClientNumber']}' class='btn btn-danger btn-sm' onclick=\"return confirm('Вы уверены, что хотите удалить этого клиента?');\">Удалить</a>
            </td>
          </tr>";
}

echo "</tbody></table>";

// Постраничная навигация
echo "<nav aria-label='Page navigation'>";
echo "<ul class='pagination'>";
for ($i = 1; $i <= $totalPages; $i++) {
    echo "<li class='page-item " . ($i === $page ? 'active' : '') . "'>
            <a class='page-link' href='?page=$i'>$i</a>
          </li>";
}
echo "</ul></nav>";

// Закрытие соединения
$mysqli->close();
?>


5.Типовой SQL запрос  на обновление данных в таблице  в админке (показать в том числе обработку входящих значений, например таблица, значение полей и т.п.)
5,<?php
// Подключение к базе данных
$host = 'localhost'; // или ваш хост
$user = 'admin'; // ваш пользователь
$password = '0000'; // ваш пароль
$database = 'sistem';

$mysqli = new mysqli($host, $user, $password, $database);

// Проверка соединения
if ($mysqli->connect_error) {
    die("Ошибка подключения: " . $mysqli->connect_error);
}

// Проверка, нужно ли редактировать клиента
$editClient = null;
if (isset($_GET['edit'])) {
    $clientNumber = $_GET['edit'];
    $stmt = $mysqli->prepare("SELECT * FROM Client WHERE ClientNumber = ?");
    $stmt->bind_param("i", $clientNumber);
    $stmt->execute();
    $result = $stmt->get_result();
    $editClient = $result->fetch_assoc();
}

// Обработка редактирования клиента
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['edit_client'])) {
    $clientNumber = $_POST['clientNumber'];
    $bankNumber = $_POST['bankNumber'];
    $phone = $_POST['phone'];
    $address = $_POST['address'];
    $cardNumber = $_POST['cardNumber'];
    $name = $_POST['name'];
    $surname = $_POST['surname'];
    $patronymic = $_POST['patronymic'];

    // Валидация входящих данных
    $errors = [];
    if (!preg_match('/^[0-9]{8,20}$/', $phone)) {
        $errors[] = "Неверный формат телефона. Должно быть от 8 до 20 цифр.";
    }
    if (!preg_match('/^[0-9]{8,20}$/', $cardNumber)) {
        $errors[] = "Неверный формат номера карты. Должно быть от 8 до 20 цифр.";
    }

    // Если есть ошибки, выводим их
    if (!empty($errors)) {
        foreach ($errors as $error) {
            echo "<div class='alert alert-danger'>$error</div>";
        }
    } else {
        // Обновление информации о клиенте
        $stmt = $mysqli->prepare("UPDATE Client SET Phone = ?, Address = ?, CardNumber = ?, Name = ?, Surname = ?, Patronymic = ?, BankNumber = ? WHERE ClientNumber = ?");
        $stmt->bind_param("sssssiiii", $phone, $address, $cardNumber, $name, $surname, $patronymic, $bankNumber, $clientNumber);
        
        if ($stmt->execute()) {
            echo "<div class='alert alert-success'>Клиент успешно обновлен.</div>";
        } else {
            echo "<div class='alert alert-danger'>Ошибка при обновлении клиента: " . $stmt->error . "</div>";
        }

        $stmt->close();
        header("Location: " . $_SERVER['PHP_SELF']);
        exit();
    }
}

// Закрытие соединения
$mysqli->close();
?>


6. Типовой SQL запрос  на удаление данных из таблицы  в админке (показать в том числе обработку входящих значений, например таблица, значение полей и т.п.)
6,// Обработка удаления клиента
if (isset($_GET['delete'])) {
    $clientNumber = $_GET['delete']; // Получаем номер клиента из URL
    $stmt = $mysqli->prepare("DELETE FROM Client WHERE ClientNumber = ?"); // Подготавливаем SQL-запрос
    $stmt->bind_param("i", $clientNumber); // Привязываем параметр (номер клиента)
    $stmt->execute(); // Выполняем запрос
    $stmt->close(); // Закрываем подготовленный запрос
    header("Location: " . $_SERVER['PHP_SELF']); // Перенаправляем на ту же страницу
    exit(); // Завершаем выполнение скрипта
}


Типовой SQL запрос  на формирование формы добавления данных в таблицу с внешними ключами (показать в том числе обработку входящих значений)

7,// Обработка добавления клиента
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_client'])) {
    $clientNumber = $_POST['clientNumber'];
    $bankNumber = $_POST['bankNumber'];
    $phone = $_POST['phone'];
    $address = $_POST['address'];
    $cardNumber = $_POST['cardNumber'];
    $name = $_POST['name'];
    $surname = $_POST['surname'];
    $patronymic = $_POST['patronymic'];
    $clientStatusID = $_POST['clientStatusID']; // Предполагается, что это поле также есть в форме

    // Проверка, существует ли клиент с таким номером
    $stmt = $mysqli->prepare("SELECT ClientNumber FROM Client WHERE ClientNumber = ?");
    $stmt->bind_param("i", $clientNumber);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        echo "<div class='alert alert-danger'>Ошибка: Клиент с таким номером уже существует.</div>";
    } else {
        // Проверка формата телефона
        if (!preg_match('/^[0-9]{8,20}$/', $phone)) {
            echo "<div class='alert alert-danger'>Ошибка: Неверный формат телефона. Должно быть от 8 до 20 цифр.</div>";
            return;
        }

        // Проверка формата номера карты
        if (!preg_match('/^[0-9]{8,20}$/', $cardNumber)) {
            echo "<div class='alert alert-danger'>Ошибка: Неверный формат номера карты. Должно быть от 8 до 20 цифр.</div>";
            return;
        }

        // Проверка существования банка
        $stmt = $mysqli->prepare("SELECT BankNumber FROM Bank WHERE BankNumber = ?");
        $stmt->bind_param("i", $bankNumber);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            // Банк существует, добавляем клиента
            $stmt = $mysqli->prepare("INSERT INTO Client (ClientNumber, Phone, Address, CardNumber, Name, Surname, Patronymic, BankNumber, ClientStatusID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            $stmt->bind_param("issssssi", $clientNumber, $phone, $address, $cardNumber, $name, $surname, $patronymic, $bankNumber, $clientStatusID);
            
            if ($stmt->execute()) {
                echo "<div class='alert alert-success'>Клиент успешно добавлен.</div>";
            } else {
                echo "<div class='alert alert-danger'>Ошибка при добавлении клиента: " . $stmt->error . "</div>";
            }
        } else {
            echo "<div class='alert alert-danger'>Ошибка: указанный банк не существует.</div>";
        }
    }

    $stmt->close();
}
